// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  module: (where?: ModuleWhereInput) => Promise<boolean>;
  moduleConfig: (where?: ModuleConfigWhereInput) => Promise<boolean>;
  navigation: (where?: NavigationWhereInput) => Promise<boolean>;
  navigationItem: (where?: NavigationItemWhereInput) => Promise<boolean>;
  page: (where?: PageWhereInput) => Promise<boolean>;
  privilege: (where?: PrivilegeWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  module: (where: ModuleWhereUniqueInput) => ModuleNullablePromise;
  modules: (args?: {
    where?: ModuleWhereInput;
    orderBy?: ModuleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Module>;
  modulesConnection: (args?: {
    where?: ModuleWhereInput;
    orderBy?: ModuleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ModuleConnectionPromise;
  moduleConfig: (
    where: ModuleConfigWhereUniqueInput
  ) => ModuleConfigNullablePromise;
  moduleConfigs: (args?: {
    where?: ModuleConfigWhereInput;
    orderBy?: ModuleConfigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ModuleConfig>;
  moduleConfigsConnection: (args?: {
    where?: ModuleConfigWhereInput;
    orderBy?: ModuleConfigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ModuleConfigConnectionPromise;
  navigation: (where: NavigationWhereUniqueInput) => NavigationNullablePromise;
  navigations: (args?: {
    where?: NavigationWhereInput;
    orderBy?: NavigationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Navigation>;
  navigationsConnection: (args?: {
    where?: NavigationWhereInput;
    orderBy?: NavigationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NavigationConnectionPromise;
  navigationItem: (
    where: NavigationItemWhereUniqueInput
  ) => NavigationItemNullablePromise;
  navigationItems: (args?: {
    where?: NavigationItemWhereInput;
    orderBy?: NavigationItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<NavigationItem>;
  navigationItemsConnection: (args?: {
    where?: NavigationItemWhereInput;
    orderBy?: NavigationItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NavigationItemConnectionPromise;
  page: (where: PageWhereUniqueInput) => PageNullablePromise;
  pages: (args?: {
    where?: PageWhereInput;
    orderBy?: PageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Page>;
  pagesConnection: (args?: {
    where?: PageWhereInput;
    orderBy?: PageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PageConnectionPromise;
  privilege: (where: PrivilegeWhereUniqueInput) => PrivilegeNullablePromise;
  privileges: (args?: {
    where?: PrivilegeWhereInput;
    orderBy?: PrivilegeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Privilege>;
  privilegesConnection: (args?: {
    where?: PrivilegeWhereInput;
    orderBy?: PrivilegeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PrivilegeConnectionPromise;
  role: (where: RoleWhereUniqueInput) => RoleNullablePromise;
  roles: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Role>;
  rolesConnection: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createModule: (data: ModuleCreateInput) => ModulePromise;
  updateModule: (args: {
    data: ModuleUpdateInput;
    where: ModuleWhereUniqueInput;
  }) => ModulePromise;
  updateManyModules: (args: {
    data: ModuleUpdateManyMutationInput;
    where?: ModuleWhereInput;
  }) => BatchPayloadPromise;
  upsertModule: (args: {
    where: ModuleWhereUniqueInput;
    create: ModuleCreateInput;
    update: ModuleUpdateInput;
  }) => ModulePromise;
  deleteModule: (where: ModuleWhereUniqueInput) => ModulePromise;
  deleteManyModules: (where?: ModuleWhereInput) => BatchPayloadPromise;
  createModuleConfig: (data: ModuleConfigCreateInput) => ModuleConfigPromise;
  updateModuleConfig: (args: {
    data: ModuleConfigUpdateInput;
    where: ModuleConfigWhereUniqueInput;
  }) => ModuleConfigPromise;
  updateManyModuleConfigs: (args: {
    data: ModuleConfigUpdateManyMutationInput;
    where?: ModuleConfigWhereInput;
  }) => BatchPayloadPromise;
  upsertModuleConfig: (args: {
    where: ModuleConfigWhereUniqueInput;
    create: ModuleConfigCreateInput;
    update: ModuleConfigUpdateInput;
  }) => ModuleConfigPromise;
  deleteModuleConfig: (
    where: ModuleConfigWhereUniqueInput
  ) => ModuleConfigPromise;
  deleteManyModuleConfigs: (
    where?: ModuleConfigWhereInput
  ) => BatchPayloadPromise;
  createNavigation: (data: NavigationCreateInput) => NavigationPromise;
  updateNavigation: (args: {
    data: NavigationUpdateInput;
    where: NavigationWhereUniqueInput;
  }) => NavigationPromise;
  updateManyNavigations: (args: {
    data: NavigationUpdateManyMutationInput;
    where?: NavigationWhereInput;
  }) => BatchPayloadPromise;
  upsertNavigation: (args: {
    where: NavigationWhereUniqueInput;
    create: NavigationCreateInput;
    update: NavigationUpdateInput;
  }) => NavigationPromise;
  deleteNavigation: (where: NavigationWhereUniqueInput) => NavigationPromise;
  deleteManyNavigations: (where?: NavigationWhereInput) => BatchPayloadPromise;
  createNavigationItem: (
    data: NavigationItemCreateInput
  ) => NavigationItemPromise;
  updateNavigationItem: (args: {
    data: NavigationItemUpdateInput;
    where: NavigationItemWhereUniqueInput;
  }) => NavigationItemPromise;
  updateManyNavigationItems: (args: {
    data: NavigationItemUpdateManyMutationInput;
    where?: NavigationItemWhereInput;
  }) => BatchPayloadPromise;
  upsertNavigationItem: (args: {
    where: NavigationItemWhereUniqueInput;
    create: NavigationItemCreateInput;
    update: NavigationItemUpdateInput;
  }) => NavigationItemPromise;
  deleteNavigationItem: (
    where: NavigationItemWhereUniqueInput
  ) => NavigationItemPromise;
  deleteManyNavigationItems: (
    where?: NavigationItemWhereInput
  ) => BatchPayloadPromise;
  createPage: (data: PageCreateInput) => PagePromise;
  updatePage: (args: {
    data: PageUpdateInput;
    where: PageWhereUniqueInput;
  }) => PagePromise;
  updateManyPages: (args: {
    data: PageUpdateManyMutationInput;
    where?: PageWhereInput;
  }) => BatchPayloadPromise;
  upsertPage: (args: {
    where: PageWhereUniqueInput;
    create: PageCreateInput;
    update: PageUpdateInput;
  }) => PagePromise;
  deletePage: (where: PageWhereUniqueInput) => PagePromise;
  deleteManyPages: (where?: PageWhereInput) => BatchPayloadPromise;
  createPrivilege: (data: PrivilegeCreateInput) => PrivilegePromise;
  updatePrivilege: (args: {
    data: PrivilegeUpdateInput;
    where: PrivilegeWhereUniqueInput;
  }) => PrivilegePromise;
  updateManyPrivileges: (args: {
    data: PrivilegeUpdateManyMutationInput;
    where?: PrivilegeWhereInput;
  }) => BatchPayloadPromise;
  upsertPrivilege: (args: {
    where: PrivilegeWhereUniqueInput;
    create: PrivilegeCreateInput;
    update: PrivilegeUpdateInput;
  }) => PrivilegePromise;
  deletePrivilege: (where: PrivilegeWhereUniqueInput) => PrivilegePromise;
  deleteManyPrivileges: (where?: PrivilegeWhereInput) => BatchPayloadPromise;
  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (args: {
    data: RoleUpdateInput;
    where: RoleWhereUniqueInput;
  }) => RolePromise;
  updateManyRoles: (args: {
    data: RoleUpdateManyMutationInput;
    where?: RoleWhereInput;
  }) => BatchPayloadPromise;
  upsertRole: (args: {
    where: RoleWhereUniqueInput;
    create: RoleCreateInput;
    update: RoleUpdateInput;
  }) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  module: (
    where?: ModuleSubscriptionWhereInput
  ) => ModuleSubscriptionPayloadSubscription;
  moduleConfig: (
    where?: ModuleConfigSubscriptionWhereInput
  ) => ModuleConfigSubscriptionPayloadSubscription;
  navigation: (
    where?: NavigationSubscriptionWhereInput
  ) => NavigationSubscriptionPayloadSubscription;
  navigationItem: (
    where?: NavigationItemSubscriptionWhereInput
  ) => NavigationItemSubscriptionPayloadSubscription;
  page: (
    where?: PageSubscriptionWhereInput
  ) => PageSubscriptionPayloadSubscription;
  privilege: (
    where?: PrivilegeSubscriptionWhereInput
  ) => PrivilegeSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ModuleTypes = "REGULAR";

export type ModuleConfigTypes =
  | "INT"
  | "STRING"
  | "BOOLEAN"
  | "DATE"
  | "URL"
  | "ARRAY"
  | "JSON";

export type ModuleConfigOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC"
  | "json_ASC"
  | "json_DESC";

export type ModuleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NavigationTypes = "TOP" | "BOTTOM";

export type NavigationItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "url_ASC"
  | "url_DESC";

export type NavigationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC";

export type PageTypes = "REGULAR";

export type PageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PrivilegeTypes = "CAN_READ_PAGES";

export type PrivilegeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC"
  | "payload_ASC"
  | "payload_DESC"
  | "description_ASC"
  | "description_DESC";

export type RolesType = "ADMIN" | "USER";

export type RoleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC"
  | "description_ASC"
  | "description_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ModuleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface ModuleConfigWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<ModuleConfigTypes>;
  type_not?: Maybe<ModuleConfigTypes>;
  type_in?: Maybe<ModuleConfigTypes[] | ModuleConfigTypes>;
  type_not_in?: Maybe<ModuleConfigTypes[] | ModuleConfigTypes>;
  AND?: Maybe<ModuleConfigWhereInput[] | ModuleConfigWhereInput>;
  OR?: Maybe<ModuleConfigWhereInput[] | ModuleConfigWhereInput>;
  NOT?: Maybe<ModuleConfigWhereInput[] | ModuleConfigWhereInput>;
}

export interface ModuleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<ModuleTypes>;
  type_not?: Maybe<ModuleTypes>;
  type_in?: Maybe<ModuleTypes[] | ModuleTypes>;
  type_not_in?: Maybe<ModuleTypes[] | ModuleTypes>;
  configs_every?: Maybe<ModuleConfigWhereInput>;
  configs_some?: Maybe<ModuleConfigWhereInput>;
  configs_none?: Maybe<ModuleConfigWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ModuleWhereInput[] | ModuleWhereInput>;
  OR?: Maybe<ModuleWhereInput[] | ModuleWhereInput>;
  NOT?: Maybe<ModuleWhereInput[] | ModuleWhereInput>;
}

export type ModuleConfigWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NavigationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NavigationItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  items_every?: Maybe<NavigationItemWhereInput>;
  items_some?: Maybe<NavigationItemWhereInput>;
  items_none?: Maybe<NavigationItemWhereInput>;
  AND?: Maybe<NavigationItemWhereInput[] | NavigationItemWhereInput>;
  OR?: Maybe<NavigationItemWhereInput[] | NavigationItemWhereInput>;
  NOT?: Maybe<NavigationItemWhereInput[] | NavigationItemWhereInput>;
}

export interface NavigationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<NavigationTypes>;
  type_not?: Maybe<NavigationTypes>;
  type_in?: Maybe<NavigationTypes[] | NavigationTypes>;
  type_not_in?: Maybe<NavigationTypes[] | NavigationTypes>;
  items_every?: Maybe<NavigationItemWhereInput>;
  items_some?: Maybe<NavigationItemWhereInput>;
  items_none?: Maybe<NavigationItemWhereInput>;
  AND?: Maybe<NavigationWhereInput[] | NavigationWhereInput>;
  OR?: Maybe<NavigationWhereInput[] | NavigationWhereInput>;
  NOT?: Maybe<NavigationWhereInput[] | NavigationWhereInput>;
}

export type NavigationItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<PageTypes>;
  type_not?: Maybe<PageTypes>;
  type_in?: Maybe<PageTypes[] | PageTypes>;
  type_not_in?: Maybe<PageTypes[] | PageTypes>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  content_every?: Maybe<ModuleWhereInput>;
  content_some?: Maybe<ModuleWhereInput>;
  content_none?: Maybe<ModuleWhereInput>;
  navigations_every?: Maybe<NavigationWhereInput>;
  navigations_some?: Maybe<NavigationWhereInput>;
  navigations_none?: Maybe<NavigationWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PageWhereInput[] | PageWhereInput>;
  OR?: Maybe<PageWhereInput[] | PageWhereInput>;
  NOT?: Maybe<PageWhereInput[] | PageWhereInput>;
}

export type PrivilegeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PrivilegeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<PrivilegeTypes>;
  type_not?: Maybe<PrivilegeTypes>;
  type_in?: Maybe<PrivilegeTypes[] | PrivilegeTypes>;
  type_not_in?: Maybe<PrivilegeTypes[] | PrivilegeTypes>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<PrivilegeWhereInput[] | PrivilegeWhereInput>;
  OR?: Maybe<PrivilegeWhereInput[] | PrivilegeWhereInput>;
  NOT?: Maybe<PrivilegeWhereInput[] | PrivilegeWhereInput>;
}

export type RoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface RoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<RolesType>;
  type_not?: Maybe<RolesType>;
  type_in?: Maybe<RolesType[] | RolesType>;
  type_not_in?: Maybe<RolesType[] | RolesType>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  privileges_every?: Maybe<PrivilegeWhereInput>;
  privileges_some?: Maybe<PrivilegeWhereInput>;
  privileges_none?: Maybe<PrivilegeWhereInput>;
  AND?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  OR?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  NOT?: Maybe<RoleWhereInput[] | RoleWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  role?: Maybe<RoleWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ModuleCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  type?: Maybe<ModuleTypes>;
  configs?: Maybe<ModuleConfigCreateManyInput>;
}

export interface ModuleConfigCreateManyInput {
  create?: Maybe<ModuleConfigCreateInput[] | ModuleConfigCreateInput>;
  connect?: Maybe<
    ModuleConfigWhereUniqueInput[] | ModuleConfigWhereUniqueInput
  >;
}

export interface ModuleConfigCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  type?: Maybe<ModuleConfigTypes>;
  json?: Maybe<Json>;
}

export interface ModuleUpdateInput {
  name?: Maybe<String>;
  type?: Maybe<ModuleTypes>;
  configs?: Maybe<ModuleConfigUpdateManyInput>;
}

export interface ModuleConfigUpdateManyInput {
  create?: Maybe<ModuleConfigCreateInput[] | ModuleConfigCreateInput>;
  update?: Maybe<
    | ModuleConfigUpdateWithWhereUniqueNestedInput[]
    | ModuleConfigUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ModuleConfigUpsertWithWhereUniqueNestedInput[]
    | ModuleConfigUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ModuleConfigWhereUniqueInput[] | ModuleConfigWhereUniqueInput>;
  connect?: Maybe<
    ModuleConfigWhereUniqueInput[] | ModuleConfigWhereUniqueInput
  >;
  set?: Maybe<ModuleConfigWhereUniqueInput[] | ModuleConfigWhereUniqueInput>;
  disconnect?: Maybe<
    ModuleConfigWhereUniqueInput[] | ModuleConfigWhereUniqueInput
  >;
  deleteMany?: Maybe<
    ModuleConfigScalarWhereInput[] | ModuleConfigScalarWhereInput
  >;
  updateMany?: Maybe<
    | ModuleConfigUpdateManyWithWhereNestedInput[]
    | ModuleConfigUpdateManyWithWhereNestedInput
  >;
}

export interface ModuleConfigUpdateWithWhereUniqueNestedInput {
  where: ModuleConfigWhereUniqueInput;
  data: ModuleConfigUpdateDataInput;
}

export interface ModuleConfigUpdateDataInput {
  name?: Maybe<String>;
  type?: Maybe<ModuleConfigTypes>;
  json?: Maybe<Json>;
}

export interface ModuleConfigUpsertWithWhereUniqueNestedInput {
  where: ModuleConfigWhereUniqueInput;
  update: ModuleConfigUpdateDataInput;
  create: ModuleConfigCreateInput;
}

export interface ModuleConfigScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<ModuleConfigTypes>;
  type_not?: Maybe<ModuleConfigTypes>;
  type_in?: Maybe<ModuleConfigTypes[] | ModuleConfigTypes>;
  type_not_in?: Maybe<ModuleConfigTypes[] | ModuleConfigTypes>;
  AND?: Maybe<ModuleConfigScalarWhereInput[] | ModuleConfigScalarWhereInput>;
  OR?: Maybe<ModuleConfigScalarWhereInput[] | ModuleConfigScalarWhereInput>;
  NOT?: Maybe<ModuleConfigScalarWhereInput[] | ModuleConfigScalarWhereInput>;
}

export interface ModuleConfigUpdateManyWithWhereNestedInput {
  where: ModuleConfigScalarWhereInput;
  data: ModuleConfigUpdateManyDataInput;
}

export interface ModuleConfigUpdateManyDataInput {
  name?: Maybe<String>;
  type?: Maybe<ModuleConfigTypes>;
  json?: Maybe<Json>;
}

export interface ModuleUpdateManyMutationInput {
  name?: Maybe<String>;
  type?: Maybe<ModuleTypes>;
}

export interface ModuleConfigUpdateInput {
  name?: Maybe<String>;
  type?: Maybe<ModuleConfigTypes>;
  json?: Maybe<Json>;
}

export interface ModuleConfigUpdateManyMutationInput {
  name?: Maybe<String>;
  type?: Maybe<ModuleConfigTypes>;
  json?: Maybe<Json>;
}

export interface NavigationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  type?: Maybe<NavigationTypes>;
  items?: Maybe<NavigationItemCreateManyInput>;
}

export interface NavigationItemCreateManyInput {
  create?: Maybe<NavigationItemCreateInput[] | NavigationItemCreateInput>;
  connect?: Maybe<
    NavigationItemWhereUniqueInput[] | NavigationItemWhereUniqueInput
  >;
}

export interface NavigationItemCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  url?: Maybe<String>;
  items?: Maybe<NavigationItemCreateManyInput>;
}

export interface NavigationUpdateInput {
  name?: Maybe<String>;
  type?: Maybe<NavigationTypes>;
  items?: Maybe<NavigationItemUpdateManyInput>;
}

export interface NavigationItemUpdateManyInput {
  create?: Maybe<NavigationItemCreateInput[] | NavigationItemCreateInput>;
  update?: Maybe<
    | NavigationItemUpdateWithWhereUniqueNestedInput[]
    | NavigationItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | NavigationItemUpsertWithWhereUniqueNestedInput[]
    | NavigationItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    NavigationItemWhereUniqueInput[] | NavigationItemWhereUniqueInput
  >;
  connect?: Maybe<
    NavigationItemWhereUniqueInput[] | NavigationItemWhereUniqueInput
  >;
  set?: Maybe<
    NavigationItemWhereUniqueInput[] | NavigationItemWhereUniqueInput
  >;
  disconnect?: Maybe<
    NavigationItemWhereUniqueInput[] | NavigationItemWhereUniqueInput
  >;
  deleteMany?: Maybe<
    NavigationItemScalarWhereInput[] | NavigationItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | NavigationItemUpdateManyWithWhereNestedInput[]
    | NavigationItemUpdateManyWithWhereNestedInput
  >;
}

export interface NavigationItemUpdateWithWhereUniqueNestedInput {
  where: NavigationItemWhereUniqueInput;
  data: NavigationItemUpdateDataInput;
}

export interface NavigationItemUpdateDataInput {
  title?: Maybe<String>;
  url?: Maybe<String>;
  items?: Maybe<NavigationItemUpdateManyInput>;
}

export interface NavigationItemUpsertWithWhereUniqueNestedInput {
  where: NavigationItemWhereUniqueInput;
  update: NavigationItemUpdateDataInput;
  create: NavigationItemCreateInput;
}

export interface NavigationItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    NavigationItemScalarWhereInput[] | NavigationItemScalarWhereInput
  >;
  OR?: Maybe<NavigationItemScalarWhereInput[] | NavigationItemScalarWhereInput>;
  NOT?: Maybe<
    NavigationItemScalarWhereInput[] | NavigationItemScalarWhereInput
  >;
}

export interface NavigationItemUpdateManyWithWhereNestedInput {
  where: NavigationItemScalarWhereInput;
  data: NavigationItemUpdateManyDataInput;
}

export interface NavigationItemUpdateManyDataInput {
  title?: Maybe<String>;
  url?: Maybe<String>;
}

export interface NavigationUpdateManyMutationInput {
  name?: Maybe<String>;
  type?: Maybe<NavigationTypes>;
}

export interface NavigationItemUpdateInput {
  title?: Maybe<String>;
  url?: Maybe<String>;
  items?: Maybe<NavigationItemUpdateManyInput>;
}

export interface NavigationItemUpdateManyMutationInput {
  title?: Maybe<String>;
  url?: Maybe<String>;
}

export interface PageCreateInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<PageTypes>;
  title: String;
  description?: Maybe<String>;
  content?: Maybe<ModuleCreateManyInput>;
  navigations?: Maybe<NavigationCreateManyInput>;
}

export interface ModuleCreateManyInput {
  create?: Maybe<ModuleCreateInput[] | ModuleCreateInput>;
  connect?: Maybe<ModuleWhereUniqueInput[] | ModuleWhereUniqueInput>;
}

export interface NavigationCreateManyInput {
  create?: Maybe<NavigationCreateInput[] | NavigationCreateInput>;
  connect?: Maybe<NavigationWhereUniqueInput[] | NavigationWhereUniqueInput>;
}

export interface PageUpdateInput {
  type?: Maybe<PageTypes>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  content?: Maybe<ModuleUpdateManyInput>;
  navigations?: Maybe<NavigationUpdateManyInput>;
}

export interface ModuleUpdateManyInput {
  create?: Maybe<ModuleCreateInput[] | ModuleCreateInput>;
  update?: Maybe<
    | ModuleUpdateWithWhereUniqueNestedInput[]
    | ModuleUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ModuleUpsertWithWhereUniqueNestedInput[]
    | ModuleUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ModuleWhereUniqueInput[] | ModuleWhereUniqueInput>;
  connect?: Maybe<ModuleWhereUniqueInput[] | ModuleWhereUniqueInput>;
  set?: Maybe<ModuleWhereUniqueInput[] | ModuleWhereUniqueInput>;
  disconnect?: Maybe<ModuleWhereUniqueInput[] | ModuleWhereUniqueInput>;
  deleteMany?: Maybe<ModuleScalarWhereInput[] | ModuleScalarWhereInput>;
  updateMany?: Maybe<
    | ModuleUpdateManyWithWhereNestedInput[]
    | ModuleUpdateManyWithWhereNestedInput
  >;
}

export interface ModuleUpdateWithWhereUniqueNestedInput {
  where: ModuleWhereUniqueInput;
  data: ModuleUpdateDataInput;
}

export interface ModuleUpdateDataInput {
  name?: Maybe<String>;
  type?: Maybe<ModuleTypes>;
  configs?: Maybe<ModuleConfigUpdateManyInput>;
}

export interface ModuleUpsertWithWhereUniqueNestedInput {
  where: ModuleWhereUniqueInput;
  update: ModuleUpdateDataInput;
  create: ModuleCreateInput;
}

export interface ModuleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<ModuleTypes>;
  type_not?: Maybe<ModuleTypes>;
  type_in?: Maybe<ModuleTypes[] | ModuleTypes>;
  type_not_in?: Maybe<ModuleTypes[] | ModuleTypes>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ModuleScalarWhereInput[] | ModuleScalarWhereInput>;
  OR?: Maybe<ModuleScalarWhereInput[] | ModuleScalarWhereInput>;
  NOT?: Maybe<ModuleScalarWhereInput[] | ModuleScalarWhereInput>;
}

export interface ModuleUpdateManyWithWhereNestedInput {
  where: ModuleScalarWhereInput;
  data: ModuleUpdateManyDataInput;
}

export interface ModuleUpdateManyDataInput {
  name?: Maybe<String>;
  type?: Maybe<ModuleTypes>;
}

export interface NavigationUpdateManyInput {
  create?: Maybe<NavigationCreateInput[] | NavigationCreateInput>;
  update?: Maybe<
    | NavigationUpdateWithWhereUniqueNestedInput[]
    | NavigationUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | NavigationUpsertWithWhereUniqueNestedInput[]
    | NavigationUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<NavigationWhereUniqueInput[] | NavigationWhereUniqueInput>;
  connect?: Maybe<NavigationWhereUniqueInput[] | NavigationWhereUniqueInput>;
  set?: Maybe<NavigationWhereUniqueInput[] | NavigationWhereUniqueInput>;
  disconnect?: Maybe<NavigationWhereUniqueInput[] | NavigationWhereUniqueInput>;
  deleteMany?: Maybe<NavigationScalarWhereInput[] | NavigationScalarWhereInput>;
  updateMany?: Maybe<
    | NavigationUpdateManyWithWhereNestedInput[]
    | NavigationUpdateManyWithWhereNestedInput
  >;
}

export interface NavigationUpdateWithWhereUniqueNestedInput {
  where: NavigationWhereUniqueInput;
  data: NavigationUpdateDataInput;
}

export interface NavigationUpdateDataInput {
  name?: Maybe<String>;
  type?: Maybe<NavigationTypes>;
  items?: Maybe<NavigationItemUpdateManyInput>;
}

export interface NavigationUpsertWithWhereUniqueNestedInput {
  where: NavigationWhereUniqueInput;
  update: NavigationUpdateDataInput;
  create: NavigationCreateInput;
}

export interface NavigationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<NavigationTypes>;
  type_not?: Maybe<NavigationTypes>;
  type_in?: Maybe<NavigationTypes[] | NavigationTypes>;
  type_not_in?: Maybe<NavigationTypes[] | NavigationTypes>;
  AND?: Maybe<NavigationScalarWhereInput[] | NavigationScalarWhereInput>;
  OR?: Maybe<NavigationScalarWhereInput[] | NavigationScalarWhereInput>;
  NOT?: Maybe<NavigationScalarWhereInput[] | NavigationScalarWhereInput>;
}

export interface NavigationUpdateManyWithWhereNestedInput {
  where: NavigationScalarWhereInput;
  data: NavigationUpdateManyDataInput;
}

export interface NavigationUpdateManyDataInput {
  name?: Maybe<String>;
  type?: Maybe<NavigationTypes>;
}

export interface PageUpdateManyMutationInput {
  type?: Maybe<PageTypes>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface PrivilegeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  type: PrivilegeTypes;
  payload?: Maybe<Json>;
  description?: Maybe<String>;
}

export interface PrivilegeUpdateInput {
  name?: Maybe<String>;
  type?: Maybe<PrivilegeTypes>;
  payload?: Maybe<Json>;
  description?: Maybe<String>;
}

export interface PrivilegeUpdateManyMutationInput {
  name?: Maybe<String>;
  type?: Maybe<PrivilegeTypes>;
  payload?: Maybe<Json>;
  description?: Maybe<String>;
}

export interface RoleCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  type?: Maybe<RolesType>;
  description?: Maybe<String>;
  privileges?: Maybe<PrivilegeCreateManyInput>;
}

export interface PrivilegeCreateManyInput {
  create?: Maybe<PrivilegeCreateInput[] | PrivilegeCreateInput>;
  connect?: Maybe<PrivilegeWhereUniqueInput[] | PrivilegeWhereUniqueInput>;
}

export interface RoleUpdateInput {
  name?: Maybe<String>;
  type?: Maybe<RolesType>;
  description?: Maybe<String>;
  privileges?: Maybe<PrivilegeUpdateManyInput>;
}

export interface PrivilegeUpdateManyInput {
  create?: Maybe<PrivilegeCreateInput[] | PrivilegeCreateInput>;
  update?: Maybe<
    | PrivilegeUpdateWithWhereUniqueNestedInput[]
    | PrivilegeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PrivilegeUpsertWithWhereUniqueNestedInput[]
    | PrivilegeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<PrivilegeWhereUniqueInput[] | PrivilegeWhereUniqueInput>;
  connect?: Maybe<PrivilegeWhereUniqueInput[] | PrivilegeWhereUniqueInput>;
  set?: Maybe<PrivilegeWhereUniqueInput[] | PrivilegeWhereUniqueInput>;
  disconnect?: Maybe<PrivilegeWhereUniqueInput[] | PrivilegeWhereUniqueInput>;
  deleteMany?: Maybe<PrivilegeScalarWhereInput[] | PrivilegeScalarWhereInput>;
  updateMany?: Maybe<
    | PrivilegeUpdateManyWithWhereNestedInput[]
    | PrivilegeUpdateManyWithWhereNestedInput
  >;
}

export interface PrivilegeUpdateWithWhereUniqueNestedInput {
  where: PrivilegeWhereUniqueInput;
  data: PrivilegeUpdateDataInput;
}

export interface PrivilegeUpdateDataInput {
  name?: Maybe<String>;
  type?: Maybe<PrivilegeTypes>;
  payload?: Maybe<Json>;
  description?: Maybe<String>;
}

export interface PrivilegeUpsertWithWhereUniqueNestedInput {
  where: PrivilegeWhereUniqueInput;
  update: PrivilegeUpdateDataInput;
  create: PrivilegeCreateInput;
}

export interface PrivilegeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<PrivilegeTypes>;
  type_not?: Maybe<PrivilegeTypes>;
  type_in?: Maybe<PrivilegeTypes[] | PrivilegeTypes>;
  type_not_in?: Maybe<PrivilegeTypes[] | PrivilegeTypes>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<PrivilegeScalarWhereInput[] | PrivilegeScalarWhereInput>;
  OR?: Maybe<PrivilegeScalarWhereInput[] | PrivilegeScalarWhereInput>;
  NOT?: Maybe<PrivilegeScalarWhereInput[] | PrivilegeScalarWhereInput>;
}

export interface PrivilegeUpdateManyWithWhereNestedInput {
  where: PrivilegeScalarWhereInput;
  data: PrivilegeUpdateManyDataInput;
}

export interface PrivilegeUpdateManyDataInput {
  name?: Maybe<String>;
  type?: Maybe<PrivilegeTypes>;
  payload?: Maybe<Json>;
  description?: Maybe<String>;
}

export interface RoleUpdateManyMutationInput {
  name?: Maybe<String>;
  type?: Maybe<RolesType>;
  description?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  name: String;
  role: RoleCreateOneInput;
}

export interface RoleCreateOneInput {
  create?: Maybe<RoleCreateInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  role?: Maybe<RoleUpdateOneRequiredInput>;
}

export interface RoleUpdateOneRequiredInput {
  create?: Maybe<RoleCreateInput>;
  update?: Maybe<RoleUpdateDataInput>;
  upsert?: Maybe<RoleUpsertNestedInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface RoleUpdateDataInput {
  name?: Maybe<String>;
  type?: Maybe<RolesType>;
  description?: Maybe<String>;
  privileges?: Maybe<PrivilegeUpdateManyInput>;
}

export interface RoleUpsertNestedInput {
  update: RoleUpdateDataInput;
  create: RoleCreateInput;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface ModuleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ModuleWhereInput>;
  AND?: Maybe<ModuleSubscriptionWhereInput[] | ModuleSubscriptionWhereInput>;
  OR?: Maybe<ModuleSubscriptionWhereInput[] | ModuleSubscriptionWhereInput>;
  NOT?: Maybe<ModuleSubscriptionWhereInput[] | ModuleSubscriptionWhereInput>;
}

export interface ModuleConfigSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ModuleConfigWhereInput>;
  AND?: Maybe<
    ModuleConfigSubscriptionWhereInput[] | ModuleConfigSubscriptionWhereInput
  >;
  OR?: Maybe<
    ModuleConfigSubscriptionWhereInput[] | ModuleConfigSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ModuleConfigSubscriptionWhereInput[] | ModuleConfigSubscriptionWhereInput
  >;
}

export interface NavigationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NavigationWhereInput>;
  AND?: Maybe<
    NavigationSubscriptionWhereInput[] | NavigationSubscriptionWhereInput
  >;
  OR?: Maybe<
    NavigationSubscriptionWhereInput[] | NavigationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NavigationSubscriptionWhereInput[] | NavigationSubscriptionWhereInput
  >;
}

export interface NavigationItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NavigationItemWhereInput>;
  AND?: Maybe<
    | NavigationItemSubscriptionWhereInput[]
    | NavigationItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    | NavigationItemSubscriptionWhereInput[]
    | NavigationItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | NavigationItemSubscriptionWhereInput[]
    | NavigationItemSubscriptionWhereInput
  >;
}

export interface PageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PageWhereInput>;
  AND?: Maybe<PageSubscriptionWhereInput[] | PageSubscriptionWhereInput>;
  OR?: Maybe<PageSubscriptionWhereInput[] | PageSubscriptionWhereInput>;
  NOT?: Maybe<PageSubscriptionWhereInput[] | PageSubscriptionWhereInput>;
}

export interface PrivilegeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PrivilegeWhereInput>;
  AND?: Maybe<
    PrivilegeSubscriptionWhereInput[] | PrivilegeSubscriptionWhereInput
  >;
  OR?: Maybe<
    PrivilegeSubscriptionWhereInput[] | PrivilegeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PrivilegeSubscriptionWhereInput[] | PrivilegeSubscriptionWhereInput
  >;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleWhereInput>;
  AND?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  OR?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  NOT?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Module {
  id: ID_Output;
  name: String;
  type?: ModuleTypes;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ModulePromise extends Promise<Module>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<ModuleTypes>;
  configs: <T = FragmentableArray<ModuleConfig>>(args?: {
    where?: ModuleConfigWhereInput;
    orderBy?: ModuleConfigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ModuleSubscription
  extends Promise<AsyncIterator<Module>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ModuleTypes>>;
  configs: <T = Promise<AsyncIterator<ModuleConfigSubscription>>>(args?: {
    where?: ModuleConfigWhereInput;
    orderBy?: ModuleConfigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ModuleNullablePromise
  extends Promise<Module | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<ModuleTypes>;
  configs: <T = FragmentableArray<ModuleConfig>>(args?: {
    where?: ModuleConfigWhereInput;
    orderBy?: ModuleConfigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ModuleConfig {
  id: ID_Output;
  name: String;
  type?: ModuleConfigTypes;
  json?: Json;
}

export interface ModuleConfigPromise
  extends Promise<ModuleConfig>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<ModuleConfigTypes>;
  json: () => Promise<Json>;
}

export interface ModuleConfigSubscription
  extends Promise<AsyncIterator<ModuleConfig>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ModuleConfigTypes>>;
  json: () => Promise<AsyncIterator<Json>>;
}

export interface ModuleConfigNullablePromise
  extends Promise<ModuleConfig | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<ModuleConfigTypes>;
  json: () => Promise<Json>;
}

export interface ModuleConnection {
  pageInfo: PageInfo;
  edges: ModuleEdge[];
}

export interface ModuleConnectionPromise
  extends Promise<ModuleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ModuleEdge>>() => T;
  aggregate: <T = AggregateModulePromise>() => T;
}

export interface ModuleConnectionSubscription
  extends Promise<AsyncIterator<ModuleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ModuleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateModuleSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ModuleEdge {
  node: Module;
  cursor: String;
}

export interface ModuleEdgePromise extends Promise<ModuleEdge>, Fragmentable {
  node: <T = ModulePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ModuleEdgeSubscription
  extends Promise<AsyncIterator<ModuleEdge>>,
    Fragmentable {
  node: <T = ModuleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateModule {
  count: Int;
}

export interface AggregateModulePromise
  extends Promise<AggregateModule>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateModuleSubscription
  extends Promise<AsyncIterator<AggregateModule>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ModuleConfigConnection {
  pageInfo: PageInfo;
  edges: ModuleConfigEdge[];
}

export interface ModuleConfigConnectionPromise
  extends Promise<ModuleConfigConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ModuleConfigEdge>>() => T;
  aggregate: <T = AggregateModuleConfigPromise>() => T;
}

export interface ModuleConfigConnectionSubscription
  extends Promise<AsyncIterator<ModuleConfigConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ModuleConfigEdgeSubscription>>>() => T;
  aggregate: <T = AggregateModuleConfigSubscription>() => T;
}

export interface ModuleConfigEdge {
  node: ModuleConfig;
  cursor: String;
}

export interface ModuleConfigEdgePromise
  extends Promise<ModuleConfigEdge>,
    Fragmentable {
  node: <T = ModuleConfigPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ModuleConfigEdgeSubscription
  extends Promise<AsyncIterator<ModuleConfigEdge>>,
    Fragmentable {
  node: <T = ModuleConfigSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateModuleConfig {
  count: Int;
}

export interface AggregateModuleConfigPromise
  extends Promise<AggregateModuleConfig>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateModuleConfigSubscription
  extends Promise<AsyncIterator<AggregateModuleConfig>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Navigation {
  id: ID_Output;
  name: String;
  type?: NavigationTypes;
}

export interface NavigationPromise extends Promise<Navigation>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<NavigationTypes>;
  items: <T = FragmentableArray<NavigationItem>>(args?: {
    where?: NavigationItemWhereInput;
    orderBy?: NavigationItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NavigationSubscription
  extends Promise<AsyncIterator<Navigation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<NavigationTypes>>;
  items: <T = Promise<AsyncIterator<NavigationItemSubscription>>>(args?: {
    where?: NavigationItemWhereInput;
    orderBy?: NavigationItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NavigationNullablePromise
  extends Promise<Navigation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<NavigationTypes>;
  items: <T = FragmentableArray<NavigationItem>>(args?: {
    where?: NavigationItemWhereInput;
    orderBy?: NavigationItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NavigationItem {
  id: ID_Output;
  title: String;
  url?: String;
}

export interface NavigationItemPromise
  extends Promise<NavigationItem>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  url: () => Promise<String>;
  items: <T = FragmentableArray<NavigationItem>>(args?: {
    where?: NavigationItemWhereInput;
    orderBy?: NavigationItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NavigationItemSubscription
  extends Promise<AsyncIterator<NavigationItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  items: <T = Promise<AsyncIterator<NavigationItemSubscription>>>(args?: {
    where?: NavigationItemWhereInput;
    orderBy?: NavigationItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NavigationItemNullablePromise
  extends Promise<NavigationItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  url: () => Promise<String>;
  items: <T = FragmentableArray<NavigationItem>>(args?: {
    where?: NavigationItemWhereInput;
    orderBy?: NavigationItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NavigationConnection {
  pageInfo: PageInfo;
  edges: NavigationEdge[];
}

export interface NavigationConnectionPromise
  extends Promise<NavigationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NavigationEdge>>() => T;
  aggregate: <T = AggregateNavigationPromise>() => T;
}

export interface NavigationConnectionSubscription
  extends Promise<AsyncIterator<NavigationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NavigationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNavigationSubscription>() => T;
}

export interface NavigationEdge {
  node: Navigation;
  cursor: String;
}

export interface NavigationEdgePromise
  extends Promise<NavigationEdge>,
    Fragmentable {
  node: <T = NavigationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NavigationEdgeSubscription
  extends Promise<AsyncIterator<NavigationEdge>>,
    Fragmentable {
  node: <T = NavigationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNavigation {
  count: Int;
}

export interface AggregateNavigationPromise
  extends Promise<AggregateNavigation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNavigationSubscription
  extends Promise<AsyncIterator<AggregateNavigation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NavigationItemConnection {
  pageInfo: PageInfo;
  edges: NavigationItemEdge[];
}

export interface NavigationItemConnectionPromise
  extends Promise<NavigationItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NavigationItemEdge>>() => T;
  aggregate: <T = AggregateNavigationItemPromise>() => T;
}

export interface NavigationItemConnectionSubscription
  extends Promise<AsyncIterator<NavigationItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NavigationItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNavigationItemSubscription>() => T;
}

export interface NavigationItemEdge {
  node: NavigationItem;
  cursor: String;
}

export interface NavigationItemEdgePromise
  extends Promise<NavigationItemEdge>,
    Fragmentable {
  node: <T = NavigationItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NavigationItemEdgeSubscription
  extends Promise<AsyncIterator<NavigationItemEdge>>,
    Fragmentable {
  node: <T = NavigationItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNavigationItem {
  count: Int;
}

export interface AggregateNavigationItemPromise
  extends Promise<AggregateNavigationItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNavigationItemSubscription
  extends Promise<AsyncIterator<AggregateNavigationItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Page {
  id: ID_Output;
  type?: PageTypes;
  title: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PagePromise extends Promise<Page>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<PageTypes>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  content: <T = FragmentableArray<Module>>(args?: {
    where?: ModuleWhereInput;
    orderBy?: ModuleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  navigations: <T = FragmentableArray<Navigation>>(args?: {
    where?: NavigationWhereInput;
    orderBy?: NavigationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PageSubscription
  extends Promise<AsyncIterator<Page>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<PageTypes>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  content: <T = Promise<AsyncIterator<ModuleSubscription>>>(args?: {
    where?: ModuleWhereInput;
    orderBy?: ModuleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  navigations: <T = Promise<AsyncIterator<NavigationSubscription>>>(args?: {
    where?: NavigationWhereInput;
    orderBy?: NavigationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageNullablePromise
  extends Promise<Page | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<PageTypes>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  content: <T = FragmentableArray<Module>>(args?: {
    where?: ModuleWhereInput;
    orderBy?: ModuleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  navigations: <T = FragmentableArray<Navigation>>(args?: {
    where?: NavigationWhereInput;
    orderBy?: NavigationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PageConnection {
  pageInfo: PageInfo;
  edges: PageEdge[];
}

export interface PageConnectionPromise
  extends Promise<PageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PageEdge>>() => T;
  aggregate: <T = AggregatePagePromise>() => T;
}

export interface PageConnectionSubscription
  extends Promise<AsyncIterator<PageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PageEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePageSubscription>() => T;
}

export interface PageEdge {
  node: Page;
  cursor: String;
}

export interface PageEdgePromise extends Promise<PageEdge>, Fragmentable {
  node: <T = PagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PageEdgeSubscription
  extends Promise<AsyncIterator<PageEdge>>,
    Fragmentable {
  node: <T = PageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePage {
  count: Int;
}

export interface AggregatePagePromise
  extends Promise<AggregatePage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePageSubscription
  extends Promise<AsyncIterator<AggregatePage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Privilege {
  id: ID_Output;
  name: String;
  type: PrivilegeTypes;
  payload?: Json;
  description?: String;
}

export interface PrivilegePromise extends Promise<Privilege>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<PrivilegeTypes>;
  payload: () => Promise<Json>;
  description: () => Promise<String>;
}

export interface PrivilegeSubscription
  extends Promise<AsyncIterator<Privilege>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<PrivilegeTypes>>;
  payload: () => Promise<AsyncIterator<Json>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface PrivilegeNullablePromise
  extends Promise<Privilege | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<PrivilegeTypes>;
  payload: () => Promise<Json>;
  description: () => Promise<String>;
}

export interface PrivilegeConnection {
  pageInfo: PageInfo;
  edges: PrivilegeEdge[];
}

export interface PrivilegeConnectionPromise
  extends Promise<PrivilegeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PrivilegeEdge>>() => T;
  aggregate: <T = AggregatePrivilegePromise>() => T;
}

export interface PrivilegeConnectionSubscription
  extends Promise<AsyncIterator<PrivilegeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PrivilegeEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePrivilegeSubscription>() => T;
}

export interface PrivilegeEdge {
  node: Privilege;
  cursor: String;
}

export interface PrivilegeEdgePromise
  extends Promise<PrivilegeEdge>,
    Fragmentable {
  node: <T = PrivilegePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PrivilegeEdgeSubscription
  extends Promise<AsyncIterator<PrivilegeEdge>>,
    Fragmentable {
  node: <T = PrivilegeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePrivilege {
  count: Int;
}

export interface AggregatePrivilegePromise
  extends Promise<AggregatePrivilege>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePrivilegeSubscription
  extends Promise<AsyncIterator<AggregatePrivilege>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Role {
  id: ID_Output;
  name?: String;
  type?: RolesType;
  description?: String;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<RolesType>;
  description: () => Promise<String>;
  privileges: <T = FragmentableArray<Privilege>>(args?: {
    where?: PrivilegeWhereInput;
    orderBy?: PrivilegeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<RolesType>>;
  description: () => Promise<AsyncIterator<String>>;
  privileges: <T = Promise<AsyncIterator<PrivilegeSubscription>>>(args?: {
    where?: PrivilegeWhereInput;
    orderBy?: PrivilegeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RoleNullablePromise
  extends Promise<Role | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<RolesType>;
  description: () => Promise<String>;
  privileges: <T = FragmentableArray<Privilege>>(args?: {
    where?: PrivilegeWhereInput;
    orderBy?: PrivilegeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RoleConnection {
  pageInfo: PageInfo;
  edges: RoleEdge[];
}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface RoleEdge {
  node: Role;
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  role: <T = RolePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  role: <T = RoleSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  role: <T = RolePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ModuleSubscriptionPayload {
  mutation: MutationType;
  node: Module;
  updatedFields: String[];
  previousValues: ModulePreviousValues;
}

export interface ModuleSubscriptionPayloadPromise
  extends Promise<ModuleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ModulePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ModulePreviousValuesPromise>() => T;
}

export interface ModuleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ModuleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ModuleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ModulePreviousValuesSubscription>() => T;
}

export interface ModulePreviousValues {
  id: ID_Output;
  name: String;
  type?: ModuleTypes;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ModulePreviousValuesPromise
  extends Promise<ModulePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<ModuleTypes>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ModulePreviousValuesSubscription
  extends Promise<AsyncIterator<ModulePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ModuleTypes>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ModuleConfigSubscriptionPayload {
  mutation: MutationType;
  node: ModuleConfig;
  updatedFields: String[];
  previousValues: ModuleConfigPreviousValues;
}

export interface ModuleConfigSubscriptionPayloadPromise
  extends Promise<ModuleConfigSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ModuleConfigPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ModuleConfigPreviousValuesPromise>() => T;
}

export interface ModuleConfigSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ModuleConfigSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ModuleConfigSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ModuleConfigPreviousValuesSubscription>() => T;
}

export interface ModuleConfigPreviousValues {
  id: ID_Output;
  name: String;
  type?: ModuleConfigTypes;
  json?: Json;
}

export interface ModuleConfigPreviousValuesPromise
  extends Promise<ModuleConfigPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<ModuleConfigTypes>;
  json: () => Promise<Json>;
}

export interface ModuleConfigPreviousValuesSubscription
  extends Promise<AsyncIterator<ModuleConfigPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ModuleConfigTypes>>;
  json: () => Promise<AsyncIterator<Json>>;
}

export interface NavigationSubscriptionPayload {
  mutation: MutationType;
  node: Navigation;
  updatedFields: String[];
  previousValues: NavigationPreviousValues;
}

export interface NavigationSubscriptionPayloadPromise
  extends Promise<NavigationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NavigationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NavigationPreviousValuesPromise>() => T;
}

export interface NavigationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NavigationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NavigationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NavigationPreviousValuesSubscription>() => T;
}

export interface NavigationPreviousValues {
  id: ID_Output;
  name: String;
  type?: NavigationTypes;
}

export interface NavigationPreviousValuesPromise
  extends Promise<NavigationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<NavigationTypes>;
}

export interface NavigationPreviousValuesSubscription
  extends Promise<AsyncIterator<NavigationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<NavigationTypes>>;
}

export interface NavigationItemSubscriptionPayload {
  mutation: MutationType;
  node: NavigationItem;
  updatedFields: String[];
  previousValues: NavigationItemPreviousValues;
}

export interface NavigationItemSubscriptionPayloadPromise
  extends Promise<NavigationItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NavigationItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NavigationItemPreviousValuesPromise>() => T;
}

export interface NavigationItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NavigationItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NavigationItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NavigationItemPreviousValuesSubscription>() => T;
}

export interface NavigationItemPreviousValues {
  id: ID_Output;
  title: String;
  url?: String;
}

export interface NavigationItemPreviousValuesPromise
  extends Promise<NavigationItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  url: () => Promise<String>;
}

export interface NavigationItemPreviousValuesSubscription
  extends Promise<AsyncIterator<NavigationItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface PageSubscriptionPayload {
  mutation: MutationType;
  node: Page;
  updatedFields: String[];
  previousValues: PagePreviousValues;
}

export interface PageSubscriptionPayloadPromise
  extends Promise<PageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PagePreviousValuesPromise>() => T;
}

export interface PageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PagePreviousValuesSubscription>() => T;
}

export interface PagePreviousValues {
  id: ID_Output;
  type?: PageTypes;
  title: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PagePreviousValuesPromise
  extends Promise<PagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<PageTypes>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PagePreviousValuesSubscription
  extends Promise<AsyncIterator<PagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<PageTypes>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PrivilegeSubscriptionPayload {
  mutation: MutationType;
  node: Privilege;
  updatedFields: String[];
  previousValues: PrivilegePreviousValues;
}

export interface PrivilegeSubscriptionPayloadPromise
  extends Promise<PrivilegeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PrivilegePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PrivilegePreviousValuesPromise>() => T;
}

export interface PrivilegeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PrivilegeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PrivilegeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PrivilegePreviousValuesSubscription>() => T;
}

export interface PrivilegePreviousValues {
  id: ID_Output;
  name: String;
  type: PrivilegeTypes;
  payload?: Json;
  description?: String;
}

export interface PrivilegePreviousValuesPromise
  extends Promise<PrivilegePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<PrivilegeTypes>;
  payload: () => Promise<Json>;
  description: () => Promise<String>;
}

export interface PrivilegePreviousValuesSubscription
  extends Promise<AsyncIterator<PrivilegePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<PrivilegeTypes>>;
  payload: () => Promise<AsyncIterator<Json>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  node: Role;
  updatedFields: String[];
  previousValues: RolePreviousValues;
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface RolePreviousValues {
  id: ID_Output;
  name?: String;
  type?: RolesType;
  description?: String;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<RolesType>;
  description: () => Promise<String>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<RolesType>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Json = any;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Module",
    embedded: false
  },
  {
    name: "ModuleConfig",
    embedded: false
  },
  {
    name: "ModuleTypes",
    embedded: false
  },
  {
    name: "ModuleConfigTypes",
    embedded: false
  },
  {
    name: "Page",
    embedded: false
  },
  {
    name: "PageTypes",
    embedded: false
  },
  {
    name: "Navigation",
    embedded: false
  },
  {
    name: "NavigationTypes",
    embedded: false
  },
  {
    name: "NavigationItem",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "RolesType",
    embedded: false
  },
  {
    name: "Privilege",
    embedded: false
  },
  {
    name: "PrivilegeTypes",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
